// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String     @id @default(uuid())
  email      String     @unique
  password   String
  firstName  String
  lastName   String
  contactNo  String     @unique
  role       UserRole   @default(USER)
  gender     Gender     @default(male)
  profileImg String?
  reviews    Review[]
  bookings   Booking[]
  blogPosts  BlogPost[]
  FAQs       FAQ[]
  events     Event[]

  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  feedbacks Feedback[]

  @@map("users")
}

model Category {
  id     String  @id @default(uuid())
  name   String  @unique
  events Event[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("categories")
}

model Event {
  id          String   @id @default(uuid())
  title       String
  description String
  startDate   DateTime
  endDate     DateTime
  location    String
  price       Float
  image       String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  categoryId String
  categories Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  bookings  Booking[]
  reviews   Review[]

  @@map("events")
}

model Booking {
  id        String        @id @default(uuid())
  status    BookingStatus @default(pending)
  startDate DateTime
  endDate   DateTime
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  eventId   String
  event     Event         @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("bookings")
}

model Review {
  id     String @id @default(uuid())
  review String
  rating Float

  userId  String
  user    User   @relation(fields: [userId], references: [id])
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("reviews")
}

// model Notification {
//  id         String   @id @default(uuid())
//   message   String
//   type      String   // e.g., confirmation, reminder
//   // Define a relation to user
//   user      User     @relation(fields: [userId], references: [id])
//   userId    Int
// }

model BlogPost {
  id      String @id @default(uuid())
  title   String
  content String
  image   String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("blog_posts")
}

model FAQ {
  id       String @id @default(uuid())
  question String
  answer   String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("faqs")
}

model Feedback {
  id       String @id @default(uuid())
  feedback String

  userId String
  user   User   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("feedback")
}

enum UserRole {
  SUPER_ADMIN
  ADMIN
  USER
}

enum Gender {
  male
  female
  others
}

enum BookingStatus {
  pending
  confirmed
  canceled
}
